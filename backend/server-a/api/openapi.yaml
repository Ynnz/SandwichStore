openapi: 3.0.0
info:
  title: Make me a sandwich
  description: |
    This is the Swagger 3.0 API for Web Architectures course group project work.
  contact:
    email: juhana.kivela@tuni.fi
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.2.0
servers:
- url: http://localhost/api/
tags:
- name: order
  description: Sandwich orders
- name: sandwich
  description: |
    Types of sandwich that users can order
paths:
  /order:
    get:
      tags:
      - order
      summary: Get a list of all orders. Empty array if no orders are found.
      operationId: getOrders
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfOrders'
      x-swagger-router-controller: Order
    post:
      tags:
      - order
      summary: Add an order for a sandwich
      operationId: addOrder
      requestBody:
        description: place an order for a sandwich
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Order not created
      x-swagger-router-controller: Order
  /order/{orderId}:
    get:
      tags:
      - order
      summary: Find an order by its ID
      description: IDs must be positive integers
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      x-swagger-router-controller: Order
  /sandwich:
    get:
      tags:
      - sandwich
      summary: Get a list of all sandwiches. Empty array if no sandwiches are found.
      operationId: getSandwiches
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfSandwiches'
      x-swagger-router-controller: Sandwich
  /sandwich/{sandwichId}:
    get:
      tags:
      - sandwich
      summary: Find sandwich by ID
      description: Returns a single sandwich information
      operationId: getSandwichById
      parameters:
      - name: sandwichId
        in: path
        description: ID of sandwich to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sandwich'
        "400":
          description: Invalid ID supplied
        "404":
          description: Sandwich not found
      security:
      - api_key: []
      x-swagger-router-controller: Sandwich
components:
  schemas:
    Item:
      required:
      - quantity
      type: object
      properties:
        id:
          type: integer
          description: id for a sandwich
          format: int64
        quantity:
          type: integer
          description: The amount of sandwiches
          format: int64
      example:
        quantity: 1
        id: 6
    Order:
      required:
      - sandwiches
      - status
      type: object
      properties:
        id:
          type: integer
          format: int64
        sandwiches:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        status:
          type: string
          description: Order Status
          enum:
          - ordered
          - received
          - inQueue
          - ready
          - failed
      example:
        sandwiches:
        - quantity: 1
          id: 6
        - quantity: 1
          id: 6
        id: 0
        status: ordered
      xml:
        name: Order
    ArrayOfOrders:
      type: array
      items:
        $ref: '#/components/schemas/Order'
    Topping:
      required:
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      example:
        name: name
        id: 6
      xml:
        name: Tag
    Sandwich:
      required:
      - breadType
      - fillings
      - name
      - toppings
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: my-super-sandwich
        toppings:
          type: array
          xml:
            name: toppings
            wrapped: true
          items:
            $ref: '#/components/schemas/Topping'
        breadType:
          type: string
          description: bread used in the sandwich
          enum:
          - oat
          - rye
          - wheat
      example:
        name: my-super-sandwich
        toppings:
        - name: name
          id: 6
        - name: name
          id: 6
        id: 0
        breadType: oat
      xml:
        name: Sandwich
    ArrayOfSandwiches:
      type: array
      items:
        $ref: '#/components/schemas/Sandwich'
  requestBodies:
    Sandwich:
      description: Sandwich object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sandwich'
      required: true
  securitySchemes:
    sandwichestore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://sandwichestore.swagger.io/oauth/dialog
          scopes:
            write:sandwiches: modify sandwiches in your account
            read:sandwiches: read your sandwiches
    api_key:
      type: apiKey
      name: X-API-KEY
      in: header
