# This is the docker-compose-yml file that must be able to start
# your group's backend.

# Remember to comment this file well!

# After you have Docker and Docker Compose installed,
# and this file is ready, you use this file and run it with:
# `docker-compose up --build`

#version: "3"

#services:
  # An example configuration of server A for groups' convenience.
  # server-a is based on the Docker image the groups produce and build themselves.
#  server-a:
    # Change the image information to match your server A image
#    image: # $USERNAME/$IMAGENAME:$TAG, something like group000/node-swagger:3a
    # 'depends_on' and 'command' are  to be used when used
    # with RabbitMQ service in this file. 'depends_on' must be set
    # to RabbitMQ service's name from this file, and 'command'
    # can be modified to be anything, but what is given should
    # work. Just uncomment them
    # depends_on:
    #   -  rapid-runner-rabbit
    # command: ["./utils/wait-for-it.sh", "rapid-runner-rabbit:5672", "--",  "npm", "start"]
#    build:
#      dockerfile: Dockerfile
#      context:  ./backend/server-a
#    ports:
#      - "12345:8080"
#    networks:
#      - backend

  # You can base this service on a rabbitmq Docker Hub image.
  # You need to expose the RabbitMQ port to other containers
  # in this  docker-compose.yml
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD the set of instructions as they see fit.
  # rapid-runner-rabbit:
  #   image:
  #   ports:
  #   expose:
  #   networks:

  # much of the server-b service entry can be copied from server-a
  # service above. server-b directory Dockerfile has more
  # information.
  # A set of needed Docker instructions like 'image:' are shown
  # below, groups should set their values. Groups are free to
  # CRUD this set of instructions as they see fit.
  # server-b:
      # image:
      # depends_on:
      # command: ["./utils/wait-for-it.sh", "rapid-runner-rabbit:5672", "--",  "npm", "start"]
      # build:
      #   dockerfile:
      #   context:
      # expose:
      # networks:

  # Your group might want to use a database to store some data
  # You can use any database you wish, PostgreSQL, MySQL and
  # MongoDB have rather good Docker documentation and examples.
  # But some groups could find a way to do this without
  # databases
  # database-service would go here.
  #database:

# Here we create a named network, that all the backend components
# must be added to for them to be able to communicate through
# exposed ports.
#networks:
#  backend:

# If you use databases for storing information, you can define
# their volumes here.
# Documentation: https://docs.docker.com/storage/volumes/
# Personally I like to look at the database's image's Dockerfile
# in the Docker Hub to see what directory it uses to store data.
# volumes:


version: '3.4'

services:
  server-a:
    image: ${GROUP_NAME}/${DOCKER_IMAGE_NAME}:${VERSION} #These are fetched from .env file located at the root of the project
    build:
      context: backend/server-a
      dockerfile: ./Dockerfile
    environment:
      NODE_ENV: production
    ports:
      - 3001:3001
    networks:
      - backend
    depends_on:
      - mongodb

  mongodb:
    image: mongo:latest
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend

  rapid-runner-rabbit:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    expose:
      - 5672
      - 15672
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 15s
      retries: 1
    networks:
      - backend

  server-b:
    image: server-b-image
    depends_on: 
      - rapid-runner-rabbit
    build:
      context: "backend/server-b"
      dockerfile: ./Dockerfile
    expose: 
      - 3002
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  mongodb_data:
    
